/* The following code was generated by JFlex 1.7.0 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */

package edu.odu.cs.cs350.jflex;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>cpp.flex</tt>
 */
public class CppScanner implements sym, Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\115\1\116\1\1\16\7\4\0\1\3\1\77"+
    "\1\24\1\54\1\6\1\105\1\102\1\25\1\63\1\64\1\5\1\23"+
    "\1\72\1\73\1\21\1\4\1\10\1\16\1\107\1\15\1\110\1\17"+
    "\1\113\1\111\1\112\1\11\1\57\1\71\1\76\1\75\1\74\1\101"+
    "\1\106\3\14\1\114\1\22\1\20\5\6\1\12\1\6\1\61\6\6"+
    "\1\62\2\6\1\13\2\6\1\67\1\26\1\70\1\104\1\6\1\0"+
    "\1\34\1\36\1\43\1\47\1\40\1\51\1\55\1\45\1\30\1\6"+
    "\1\41\1\35\1\52\1\46\1\37\1\53\1\6\1\31\1\44\1\32"+
    "\1\33\1\27\1\56\1\50\1\42\1\60\1\65\1\103\1\66\1\100"+
    "\6\7\1\117\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6"+
    "\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6"+
    "\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6"+
    "\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6"+
    "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6"+
    "\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0"+
    "\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6"+
    "\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6"+
    "\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0"+
    "\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6"+
    "\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0"+
    "\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7"+
    "\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6"+
    "\1\7\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\115"+
    "\1\115\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7"+
    "\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7"+
    "\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0"+
    "\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0"+
    "\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7"+
    "\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6"+
    "\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0"+
    "\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6"+
    "\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7"+
    "\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0"+
    "\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6"+
    "\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0"+
    "\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0"+
    "\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0"+
    "\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7"+
    "\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0"+
    "\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0"+
    "\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0"+
    "\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0"+
    "\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6"+
    "\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0"+
    "\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7"+
    "\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0"+
    "\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0"+
    "\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0"+
    "\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0"+
    "\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0"+
    "\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0"+
    "\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0"+
    "\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0"+
    "\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\15\5\1\13\2\5\1\14\1\5"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\13"+
    "\1\34\1\35\1\36\1\13\1\37\2\40\1\41\2\1"+
    "\2\42\1\1\1\2\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\0\3\45\1\50\1\46\1\0\1\51\1\52"+
    "\1\53\3\5\1\54\25\5\1\55\10\5\1\0\2\5"+
    "\1\7\1\5\1\56\1\57\1\0\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\2\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\12\74\1\0\1\107\2\110"+
    "\2\45\1\46\1\0\3\5\1\111\5\5\1\112\24\5"+
    "\1\113\5\5\1\114\4\5\1\0\3\5\1\0\1\115"+
    "\1\116\1\117\1\75\1\0\1\120\1\0\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\110"+
    "\2\45\1\5\1\132\5\5\1\133\1\5\1\134\1\5"+
    "\1\135\1\5\1\136\1\137\1\140\2\5\1\141\3\5"+
    "\1\142\20\5\1\0\1\143\1\5\1\144\1\0\1\145"+
    "\1\110\2\45\7\5\1\146\1\147\1\5\1\150\1\151"+
    "\1\5\1\152\2\5\1\153\1\5\1\154\5\5\1\155"+
    "\1\156\4\5\1\0\1\157\1\0\1\110\2\45\5\5"+
    "\1\160\1\5\1\161\3\5\1\162\1\5\1\163\1\164"+
    "\1\165\4\5\1\166\1\5\2\0\1\110\2\45\1\167"+
    "\5\5\1\170\3\5\1\171\1\172\1\173\1\5\1\166"+
    "\1\174\2\0\1\110\2\45\1\175\4\5\1\176\1\177"+
    "\1\5\1\173\1\5\1\200\1\0\1\110\2\45\1\201"+
    "\2\5\1\202\1\5\1\203\1\0\1\110\2\45\1\204"+
    "\1\205\1\5\2\0\2\45\1\5\1\206\1\0\2\45"+
    "\1\207\1\0\2\45\1\0\2\45\1\0\2\45\1\0"+
    "\2\45\1\0\1\45\1\46\1\0\5\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\360\0\u0190\0\u01e0"+
    "\0\u0230\0\u0280\0\u02d0\0\u0320\0\u0370\0\360\0\360\0\u03c0"+
    "\0\u0410\0\u0460\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640"+
    "\0\u0690\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0"+
    "\0\u0910\0\360\0\360\0\360\0\360\0\360\0\360\0\360"+
    "\0\360\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\360\0\360"+
    "\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\360\0\u0c30\0\u0c80\0\360"+
    "\0\360\0\u0cd0\0\u0d20\0\u0d70\0\360\0\u0dc0\0\u0e10\0\u0e60"+
    "\0\360\0\360\0\u0eb0\0\u0f00\0\360\0\u0f50\0\u0fa0\0\u0ff0"+
    "\0\u1040\0\360\0\u1090\0\u10e0\0\360\0\360\0\360\0\u1130"+
    "\0\u1180\0\u11d0\0\u0230\0\u1220\0\u1270\0\u12c0\0\u1310\0\u1360"+
    "\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590\0\u15e0"+
    "\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810\0\u1860"+
    "\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0"+
    "\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\360\0\u1c70\0\360\0\360"+
    "\0\u1cc0\0\u1d10\0\360\0\360\0\360\0\u1d60\0\360\0\360"+
    "\0\360\0\360\0\360\0\360\0\360\0\360\0\u1db0\0\u1e00"+
    "\0\360\0\360\0\360\0\360\0\360\0\360\0\360\0\360"+
    "\0\360\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030"+
    "\0\u2080\0\u20d0\0\u2120\0\u2170\0\360\0\u21c0\0\u2210\0\u2260"+
    "\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0"+
    "\0\u2530\0\u2580\0\u25d0\0\u2620\0\u0230\0\u2670\0\u26c0\0\u2710"+
    "\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990"+
    "\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0\0\u2c10"+
    "\0\u2c60\0\u0230\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u0230"+
    "\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u3020\0\u3070"+
    "\0\u30c0\0\u3110\0\360\0\360\0\360\0\u1ea0\0\360\0\u3160"+
    "\0\360\0\360\0\360\0\360\0\360\0\360\0\360\0\360"+
    "\0\360\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u0230\0\u32f0\0\u3340"+
    "\0\u3390\0\u33e0\0\u3430\0\u0230\0\u3480\0\u0230\0\u34d0\0\u0230"+
    "\0\u3520\0\u0230\0\u0230\0\u0230\0\u3570\0\u35c0\0\u0230\0\u3610"+
    "\0\u3660\0\u36b0\0\u0230\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840"+
    "\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u3ac0"+
    "\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u0230\0\u3c50\0\u0230\0\u3ca0"+
    "\0\360\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0"+
    "\0\u3f20\0\u3f70\0\u3fc0\0\u4010\0\u0230\0\u4060\0\u0230\0\u0230"+
    "\0\u40b0\0\u0230\0\u4100\0\u4150\0\u0230\0\u41a0\0\u0230\0\u41f0"+
    "\0\u4240\0\u4290\0\u42e0\0\u4330\0\u0230\0\u0230\0\u4380\0\u43d0"+
    "\0\u4420\0\u4470\0\u44c0\0\u0230\0\u4510\0\u4560\0\u45b0\0\u4600"+
    "\0\u4650\0\u46a0\0\u46f0\0\u4740\0\u4790\0\u0230\0\u47e0\0\u0230"+
    "\0\u4830\0\u4880\0\u48d0\0\u0230\0\u4920\0\u0230\0\u0230\0\u0230"+
    "\0\u4970\0\u49c0\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0"+
    "\0\u4bf0\0\u4c40\0\u4c90\0\u0230\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0"+
    "\0\u4e20\0\u0230\0\u4e70\0\u4ec0\0\u4f10\0\u0230\0\u0230\0\u4f60"+
    "\0\u4fb0\0\360\0\u0230\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140"+
    "\0\u0230\0\u5190\0\u51e0\0\u5230\0\u5280\0\u0230\0\u0230\0\u52d0"+
    "\0\360\0\u5320\0\360\0\u5370\0\u53c0\0\u5410\0\u5460\0\u0230"+
    "\0\u54b0\0\u5500\0\u0230\0\u5550\0\u0230\0\u55a0\0\u55f0\0\u5640"+
    "\0\u5690\0\u0230\0\u0230\0\u56e0\0\u5730\0\u5780\0\u57d0\0\u5820"+
    "\0\u5870\0\360\0\u58c0\0\u5910\0\u5960\0\u0230\0\u59b0\0\u5a00"+
    "\0\u5a50\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0\0\u5c30\0\u5c80"+
    "\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5dc0\0\u5e10\0\u5e60\0\u5eb0"+
    "\0\u5f00\0\u5f50\0\u5fa0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\2\11\1\24"+
    "\1\25\1\11\1\26\2\11\1\27\1\30\1\11\1\31"+
    "\1\32\1\11\1\33\1\11\1\34\1\35\1\36\1\37"+
    "\1\40\1\11\1\41\1\11\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\5\13\1\11\1\4\1\6\1\4\1\66\1\67\1\70"+
    "\21\66\1\71\1\66\1\72\71\66\1\73\1\74\1\75"+
    "\22\73\1\4\1\76\71\73\122\0\1\6\121\0\1\77"+
    "\1\100\67\0\1\101\117\0\1\102\30\0\13\11\1\0"+
    "\1\11\4\0\25\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\10\0\1\103\1\104\1\105\1\106"+
    "\1\0\1\107\1\110\1\111\1\112\1\113\1\114\12\0"+
    "\1\105\2\0\1\114\6\0\1\115\1\106\1\112\35\0"+
    "\1\107\2\111\1\104\1\111\1\115\13\0\2\13\1\105"+
    "\2\0\3\13\1\112\1\113\1\114\12\0\1\105\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\5\13\1\115"+
    "\13\0\2\113\3\0\3\113\67\0\5\113\27\0\1\116"+
    "\51\0\1\117\30\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\120\6\11\1\121\14\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\122\2\11\1\123\1\124\1\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\125\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\126\13\11\1\127"+
    "\6\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\130"+
    "\14\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\131"+
    "\5\11\1\132\2\11\1\133\11\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\134\12\11\1\135\3\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\136\1\137\1\11"+
    "\1\140\5\11\1\141\6\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\142\1\143\6\11\1\144\2\11\1\145"+
    "\6\11\1\0\1\11\1\146\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\147\3\11\1\150\13\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\151\1\152\13\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\153\3\11\1\154\1\155\1\11"+
    "\1\156\14\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\157\1\11\1\160\1\161\17\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\30\0\1\162\75\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\163\14\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\164\6\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\57\0"+
    "\1\165\46\0\13\11\1\0\1\11\4\0\25\11\1\0"+
    "\2\11\1\0\2\11\1\166\24\0\6\11\2\0\1\11"+
    "\73\0\1\167\1\165\1\170\11\0\1\171\104\0\1\172"+
    "\1\173\117\0\1\174\117\0\1\175\1\176\116\0\1\177"+
    "\117\0\1\200\4\0\1\201\112\0\1\202\5\0\1\203"+
    "\111\0\1\204\117\0\1\205\22\0\1\66\2\0\21\66"+
    "\1\0\1\66\1\0\71\66\2\0\1\70\115\0\1\206"+
    "\2\0\5\206\1\207\4\206\2\207\1\210\4\206\1\211"+
    "\1\212\1\213\2\206\1\214\1\215\3\206\1\216\7\206"+
    "\1\217\2\206\1\220\35\206\1\207\2\210\1\206\1\210"+
    "\1\206\30\0\1\221\74\0\1\75\115\0\1\206\2\0"+
    "\5\206\1\222\4\206\2\222\1\223\4\206\1\224\1\225"+
    "\1\226\2\206\1\227\1\230\3\206\1\231\7\206\1\232"+
    "\2\206\1\233\35\206\1\222\2\223\1\206\1\223\1\206"+
    "\3\0\1\77\1\5\1\6\115\77\5\100\1\234\112\100"+
    "\10\0\1\103\1\104\1\235\2\0\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\1\107\2\111\1\104\1\111"+
    "\1\115\13\0\2\104\3\0\3\104\1\112\1\113\1\114"+
    "\15\0\1\114\6\0\1\115\1\0\1\112\35\0\5\104"+
    "\1\115\13\0\1\236\1\237\2\0\5\237\1\0\1\237"+
    "\11\0\1\237\1\0\1\237\1\0\1\237\2\0\1\237"+
    "\3\0\1\237\1\0\1\237\35\0\6\237\13\0\1\240"+
    "\1\104\1\235\2\0\3\240\1\112\1\113\1\114\12\0"+
    "\1\235\2\0\1\114\6\0\1\115\1\0\1\112\35\0"+
    "\3\240\1\104\1\240\1\115\13\0\1\111\1\104\1\235"+
    "\2\0\3\111\1\112\1\113\1\114\12\0\1\235\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\3\111\1\104"+
    "\1\111\1\115\13\0\1\241\1\104\1\235\2\0\3\241"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\3\241\1\104\1\241\1\115"+
    "\13\0\2\113\3\0\3\113\1\112\1\0\1\114\15\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\5\113\1\115"+
    "\13\0\2\242\3\0\3\242\3\0\1\243\47\0\1\243"+
    "\13\0\5\242\12\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\244\22\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\245\4\11\1\246\16\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\247\11\11\1\250\7\11\1\0\2\11"+
    "\1\0\3\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\24\11\1\251\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\252\21\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\253\1\254\5\11\1\255\11\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\256\1\257"+
    "\22\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\17\11\1\260"+
    "\5\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\261"+
    "\13\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\262"+
    "\14\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\263"+
    "\21\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\264"+
    "\7\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\265"+
    "\21\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\266"+
    "\11\11\1\267\7\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\270\17\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\271\5\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\272\17\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\273\2\11\1\274\17\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\24\11\1\275\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\276\5\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\277\14\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\300\23\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\301\21\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\25\11\1\0\1\11\1\302\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\303\20\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\22\11\1\304\2\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\305\5\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\306\16\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\307\14\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\310\22\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\311\6\11\1\312\14\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\313\15\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\314\10\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\46\0\1\315\57\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\316\21\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\317\23\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\4\11\1\320\6\11\1\0\1\11\4\0\25\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\16\0"+
    "\1\321\175\0\1\322\1\323\117\0\1\324\32\0\1\210"+
    "\4\0\3\210\67\0\3\210\1\0\1\210\14\0\1\325"+
    "\4\0\3\325\67\0\3\325\1\0\1\325\14\0\1\326"+
    "\4\0\3\326\5\0\1\327\61\0\3\326\1\0\1\326"+
    "\14\0\1\330\4\0\3\330\5\0\1\327\61\0\3\330"+
    "\1\0\1\330\31\0\1\331\117\0\1\332\117\0\1\333"+
    "\117\0\1\334\117\0\1\335\117\0\1\336\117\0\1\337"+
    "\117\0\1\340\72\0\4\100\1\6\1\234\112\100\10\0"+
    "\1\236\1\237\1\341\1\0\5\237\1\0\1\237\11\0"+
    "\1\237\1\341\1\237\1\0\1\237\2\0\1\237\3\0"+
    "\1\237\1\0\1\237\35\0\6\237\13\0\2\342\1\341"+
    "\1\0\5\342\1\0\1\342\11\0\1\342\1\341\1\342"+
    "\1\0\1\342\2\0\1\342\3\0\1\342\1\0\1\342"+
    "\35\0\6\342\13\0\1\343\1\104\1\235\2\0\3\343"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\3\343\1\104\1\343\1\115"+
    "\13\0\1\344\1\104\1\235\2\0\3\344\1\112\1\113"+
    "\1\114\12\0\1\235\2\0\1\114\6\0\1\115\1\0"+
    "\1\112\35\0\3\344\1\104\1\344\1\115\13\0\2\242"+
    "\3\0\3\242\1\112\26\0\1\115\1\0\1\112\35\0"+
    "\5\242\1\115\13\0\2\242\3\0\3\242\67\0\5\242"+
    "\12\0\13\11\1\0\1\11\4\0\3\11\1\345\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\20\11\1\346\4\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\347\17\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\350\13\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\351\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\352\16\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\353\20\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\354\13\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\17\11\1\355\5\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\356\7\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\357\14\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\25\11\1\0\1\360"+
    "\1\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\361\17\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\362\16\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\363\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\364\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\365\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\366\10\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\367\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\370\7\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\371\11\11\1\372"+
    "\7\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\373"+
    "\22\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\374"+
    "\23\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\375"+
    "\21\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\376"+
    "\13\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\14\11\1\377"+
    "\10\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0100"+
    "\22\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u0101"+
    "\21\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u0102"+
    "\23\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0103"+
    "\15\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0104"+
    "\17\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0105"+
    "\17\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u0106"+
    "\7\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0107"+
    "\17\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0108\24\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0109\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\u010a\16\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u010b\12\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\43\0\1\u010c\62\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u010d\14\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\u010e\16\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\4\11\1\u010f\6\11\1\0\1\11"+
    "\4\0\25\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\110\0\1\u0110\104\0\1\u0111\47\0\1\327"+
    "\102\0\2\u0112\1\341\1\0\5\u0112\1\0\1\u0112\11\0"+
    "\1\u0112\1\341\1\u0112\1\0\1\u0112\2\0\1\u0112\3\0"+
    "\1\u0112\1\0\1\u0112\35\0\6\u0112\13\0\1\u0113\1\104"+
    "\1\235\2\0\3\u0113\1\112\1\113\1\114\12\0\1\235"+
    "\2\0\1\114\6\0\1\115\1\0\1\112\35\0\3\u0113"+
    "\1\104\1\u0113\1\115\13\0\1\u0114\1\104\1\235\2\0"+
    "\3\u0114\1\112\1\113\1\114\12\0\1\235\2\0\1\114"+
    "\6\0\1\115\1\0\1\112\35\0\3\u0114\1\104\1\u0114"+
    "\1\115\11\0\13\11\1\0\1\11\4\0\4\11\1\u0115"+
    "\20\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u0116"+
    "\21\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0117"+
    "\22\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0118"+
    "\17\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0119"+
    "\13\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u011a"+
    "\22\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u011b"+
    "\7\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\25\11\1\0"+
    "\1\11\1\u011c\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u011d\12\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\17\11\1\u011e\5\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\u011f\6\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0120\7\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u0121\23\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0122\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0123\10\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u0124\23\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0125\22\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\u0126\6\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0127\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0128\10\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0129\24\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u012a\16\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u012b\20\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u012c\16\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u012d\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u012e\21\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u012f\17\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0130\13\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u0131\23\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0132\17\11\1\0"+
    "\2\11\1\0\3\11\24\0\6\11\2\0\1\11\35\0"+
    "\1\u0133\70\0\13\11\1\0\1\11\4\0\11\11\1\u0134"+
    "\13\11\1\0\2\11\1\0\3\11\24\0\6\11\2\0"+
    "\1\11\111\0\1\u0135\16\0\2\u0136\1\341\1\0\5\u0136"+
    "\1\0\1\u0136\11\0\1\u0136\1\341\1\u0136\1\0\1\u0136"+
    "\2\0\1\u0136\3\0\1\u0136\1\0\1\u0136\35\0\6\u0136"+
    "\13\0\1\u0137\1\104\1\235\2\0\3\u0137\1\112\1\113"+
    "\1\114\12\0\1\235\2\0\1\114\6\0\1\115\1\0"+
    "\1\112\35\0\3\u0137\1\104\1\u0137\1\115\13\0\1\u0138"+
    "\1\104\1\235\2\0\3\u0138\1\112\1\113\1\114\12\0"+
    "\1\235\2\0\1\114\6\0\1\115\1\0\1\112\35\0"+
    "\3\u0138\1\104\1\u0138\1\115\11\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0139\17\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u013a\23\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\22\11\1\u013b\2\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\u013c\5\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u013d\1\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\u013e\5\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u013f\23\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u0140\7\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\20\11\1\u0141\4\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\u0142\5\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0143\21\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u0144\10\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0145\22\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\u0146\6\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0147\13\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0148\13\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u0149\16\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u014a\16\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u014b\21\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u014c\10\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u014d\10\11\1\0\2\11\1\0\3\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\25\11\1\0\1\u014e\1\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\33\0\1\u014f\174\0\1\u0150\17\0"+
    "\2\u0151\1\341\1\0\5\u0151\1\0\1\u0151\11\0\1\u0151"+
    "\1\341\1\u0151\1\0\1\u0151\2\0\1\u0151\3\0\1\u0151"+
    "\1\0\1\u0151\35\0\6\u0151\13\0\1\u0152\1\104\1\235"+
    "\2\0\3\u0152\1\112\1\113\1\114\12\0\1\235\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\3\u0152\1\104"+
    "\1\u0152\1\115\13\0\1\u0153\1\104\1\235\2\0\3\u0153"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\3\u0153\1\104\1\u0153\1\115"+
    "\11\0\13\11\1\0\1\11\4\0\6\11\1\u0154\16\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\u0155\16\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0156\17\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0157\10\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0158\13\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0159\13\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u015a\7\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u015b\20\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\22\11\1\u015c\2\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u015d\14\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u015e\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\u015f\11\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0160\13\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0161\21\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\25\11\1\0\2\11"+
    "\1\u0162\3\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u0163\13\11\1\0\2\11"+
    "\1\0\3\11\24\0\6\11\2\0\1\11\47\0\1\u0164"+
    "\162\0\1\u0165\15\0\2\u0166\1\341\1\0\5\u0166\1\0"+
    "\1\u0166\11\0\1\u0166\1\341\1\u0166\1\0\1\u0166\2\0"+
    "\1\u0166\3\0\1\u0166\1\0\1\u0166\35\0\6\u0166\13\0"+
    "\1\u0167\1\104\1\235\2\0\3\u0167\1\112\1\113\1\114"+
    "\12\0\1\235\2\0\1\114\6\0\1\115\1\0\1\112"+
    "\35\0\3\u0167\1\104\1\u0167\1\115\13\0\1\u0168\1\104"+
    "\1\235\2\0\3\u0168\1\112\1\113\1\114\12\0\1\235"+
    "\2\0\1\114\6\0\1\115\1\0\1\112\35\0\3\u0168"+
    "\1\104\1\u0168\1\115\11\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0169\13\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\u016a\10\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u016b\13\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u016c\5\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u016d\5\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u016e\13\11\1\0\2\11\1\0\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\24\11\1\u016f\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\17\11"+
    "\1\u0170\5\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\25\11"+
    "\1\0\2\11\1\u0171\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0172\13\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\40\0\1\u0173\74\0\1\u0174\112\0\2\u0175\1\341\1\0"+
    "\5\u0175\1\0\1\u0175\11\0\1\u0175\1\341\1\u0175\1\0"+
    "\1\u0175\2\0\1\u0175\3\0\1\u0175\1\0\1\u0175\35\0"+
    "\6\u0175\13\0\1\u0176\1\104\1\235\2\0\3\u0176\1\112"+
    "\1\113\1\114\12\0\1\235\2\0\1\114\6\0\1\115"+
    "\1\0\1\112\35\0\3\u0176\1\104\1\u0176\1\115\13\0"+
    "\1\u0177\1\104\1\235\2\0\3\u0177\1\112\1\113\1\114"+
    "\12\0\1\235\2\0\1\114\6\0\1\115\1\0\1\112"+
    "\35\0\3\u0177\1\104\1\u0177\1\115\11\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u0178\13\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0179\14\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u017a\21\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u017b\21\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u017c\23\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\20\11\1\u017d\4\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\113\0\1\u017e\14\0"+
    "\2\u017f\1\341\1\0\5\u017f\1\0\1\u017f\11\0\1\u017f"+
    "\1\341\1\u017f\1\0\1\u017f\2\0\1\u017f\3\0\1\u017f"+
    "\1\0\1\u017f\35\0\6\u017f\13\0\1\u0180\1\104\1\235"+
    "\2\0\3\u0180\1\112\1\113\1\114\12\0\1\235\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\3\u0180\1\104"+
    "\1\u0180\1\115\13\0\1\u0181\1\104\1\235\2\0\3\u0181"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\3\u0181\1\104\1\u0181\1\115"+
    "\11\0\13\11\1\0\1\11\4\0\22\11\1\u0182\2\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0183\7\11"+
    "\1\0\2\11\1\0\3\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\25\11\1\0\2\11"+
    "\1\0\1\u0184\2\11\24\0\6\11\2\0\1\11\110\0"+
    "\1\u0185\17\0\2\u0186\1\341\1\0\5\u0186\1\0\1\u0186"+
    "\11\0\1\u0186\1\341\1\u0186\1\0\1\u0186\2\0\1\u0186"+
    "\3\0\1\u0186\1\0\1\u0186\35\0\6\u0186\13\0\1\u0187"+
    "\1\104\1\235\2\0\3\u0187\1\112\1\113\1\114\12\0"+
    "\1\235\2\0\1\114\6\0\1\115\1\0\1\112\35\0"+
    "\3\u0187\1\104\1\u0187\1\115\13\0\1\u0188\1\104\1\235"+
    "\2\0\3\u0188\1\112\1\113\1\114\12\0\1\235\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\3\u0188\1\104"+
    "\1\u0188\1\115\11\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u0189\13\11\1\0\2\11\1\0\3\11\24\0\6\11"+
    "\2\0\1\11\112\0\1\u018a\15\0\2\u018b\1\341\1\0"+
    "\5\u018b\1\0\1\u018b\11\0\1\u018b\1\341\1\u018b\1\0"+
    "\1\u018b\2\0\1\u018b\3\0\1\u018b\1\0\1\u018b\35\0"+
    "\6\u018b\13\0\1\u018c\1\104\1\235\2\0\3\u018c\1\112"+
    "\1\113\1\114\12\0\1\235\2\0\1\114\6\0\1\115"+
    "\1\0\1\112\35\0\3\u018c\1\104\1\u018c\1\115\13\0"+
    "\1\u018d\1\104\1\235\2\0\3\u018d\1\112\1\113\1\114"+
    "\12\0\1\235\2\0\1\114\6\0\1\115\1\0\1\112"+
    "\35\0\3\u018d\1\104\1\u018d\1\115\11\0\13\11\1\0"+
    "\1\11\4\0\20\11\1\u018e\4\11\1\0\2\11\1\0"+
    "\3\11\24\0\6\11\2\0\1\11\10\0\2\u018f\1\341"+
    "\1\0\5\u018f\1\0\1\u018f\11\0\1\u018f\1\341\1\u018f"+
    "\1\0\1\u018f\2\0\1\u018f\3\0\1\u018f\1\0\1\u018f"+
    "\35\0\6\u018f\13\0\1\u0190\1\104\1\235\2\0\3\u0190"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\3\u0190\1\104\1\u0190\1\115"+
    "\13\0\1\u0191\1\104\1\235\2\0\3\u0191\1\112\1\113"+
    "\1\114\12\0\1\235\2\0\1\114\6\0\1\115\1\0"+
    "\1\112\35\0\3\u0191\1\104\1\u0191\1\115\13\0\2\u0192"+
    "\1\341\1\0\5\u0192\1\0\1\u0192\11\0\1\u0192\1\341"+
    "\1\u0192\1\0\1\u0192\2\0\1\u0192\3\0\1\u0192\1\0"+
    "\1\u0192\35\0\6\u0192\13\0\1\u0193\1\104\1\235\2\0"+
    "\3\u0193\1\112\1\113\1\114\12\0\1\235\2\0\1\114"+
    "\6\0\1\115\1\0\1\112\35\0\3\u0193\1\104\1\u0193"+
    "\1\115\13\0\1\u0194\1\104\1\235\2\0\3\u0194\1\112"+
    "\1\113\1\114\12\0\1\235\2\0\1\114\6\0\1\115"+
    "\1\0\1\112\35\0\3\u0194\1\104\1\u0194\1\115\13\0"+
    "\2\u0195\1\341\1\0\5\u0195\1\0\1\u0195\11\0\1\u0195"+
    "\1\341\1\u0195\1\0\1\u0195\2\0\1\u0195\3\0\1\u0195"+
    "\1\0\1\u0195\35\0\6\u0195\13\0\1\u0196\1\104\1\235"+
    "\2\0\3\u0196\1\112\1\113\1\114\12\0\1\235\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\3\u0196\1\104"+
    "\1\u0196\1\115\13\0\1\u0197\1\104\1\235\2\0\3\u0197"+
    "\1\112\1\113\1\114\12\0\1\235\2\0\1\114\6\0"+
    "\1\115\1\0\1\112\35\0\3\u0197\1\104\1\u0197\1\115"+
    "\13\0\2\u0198\1\341\1\0\5\u0198\1\0\1\u0198\11\0"+
    "\1\u0198\1\341\1\u0198\1\0\1\u0198\2\0\1\u0198\3\0"+
    "\1\u0198\1\0\1\u0198\35\0\6\u0198\13\0\1\u0199\1\104"+
    "\1\235\2\0\3\u0199\1\112\1\113\1\114\12\0\1\235"+
    "\2\0\1\114\6\0\1\115\1\0\1\112\35\0\3\u0199"+
    "\1\104\1\u0199\1\115\13\0\1\u019a\1\104\1\235\2\0"+
    "\3\u019a\1\112\1\113\1\114\12\0\1\235\2\0\1\114"+
    "\6\0\1\115\1\0\1\112\35\0\3\u019a\1\104\1\u019a"+
    "\1\115\13\0\2\u019b\1\341\1\0\5\u019b\1\0\1\u019b"+
    "\11\0\1\u019b\1\341\1\u019b\1\0\1\u019b\2\0\1\u019b"+
    "\3\0\1\u019b\1\0\1\u019b\35\0\6\u019b\13\0\1\u019c"+
    "\1\104\1\235\2\0\3\u019c\1\112\1\113\1\114\12\0"+
    "\1\235\2\0\1\114\6\0\1\115\1\0\1\112\35\0"+
    "\3\u019c\1\104\1\u019c\1\115\13\0\1\u019d\1\104\1\235"+
    "\2\0\3\u019d\1\112\1\113\1\114\12\0\1\235\2\0"+
    "\1\114\6\0\1\115\1\0\1\112\35\0\3\u019d\1\104"+
    "\1\u019d\1\115\13\0\2\u019e\1\341\1\0\5\u019e\1\0"+
    "\1\u019e\11\0\1\u019e\1\341\1\u019e\1\0\1\u019e\2\0"+
    "\1\u019e\3\0\1\u019e\1\0\1\u019e\35\0\6\u019e\13\0"+
    "\1\u019f\1\104\1\235\2\0\3\u019f\1\112\1\113\1\114"+
    "\12\0\1\235\2\0\1\114\6\0\1\115\1\0\1\112"+
    "\35\0\3\u019f\1\104\1\u019f\1\115\15\0\1\341\22\0"+
    "\1\341\72\0\1\u01a0\1\104\1\235\2\0\3\u01a0\1\112"+
    "\1\113\1\114\12\0\1\235\2\0\1\114\6\0\1\115"+
    "\1\0\1\112\35\0\3\u01a0\1\104\1\u01a0\1\115\13\0"+
    "\1\u01a1\1\104\1\235\2\0\3\u01a1\1\112\1\113\1\114"+
    "\12\0\1\235\2\0\1\114\6\0\1\115\1\0\1\112"+
    "\35\0\3\u01a1\1\104\1\u01a1\1\115\13\0\1\u01a2\1\104"+
    "\1\235\2\0\3\u01a2\1\112\1\113\1\114\12\0\1\235"+
    "\2\0\1\114\6\0\1\115\1\0\1\112\35\0\3\u01a2"+
    "\1\104\1\u01a2\1\115\13\0\1\u01a3\1\104\1\235\2\0"+
    "\3\u01a3\1\112\1\113\1\114\12\0\1\235\2\0\1\114"+
    "\6\0\1\115\1\0\1\112\35\0\3\u01a3\1\104\1\u01a3"+
    "\1\115\13\0\2\104\1\235\2\0\3\104\1\112\1\113"+
    "\1\114\12\0\1\235\2\0\1\114\6\0\1\115\1\0"+
    "\1\112\35\0\5\104\1\115\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\22\1\10\11"+
    "\5\1\2\11\4\1\1\11\2\1\2\11\3\1\1\11"+
    "\2\1\1\0\2\11\2\1\1\11\1\0\3\1\1\11"+
    "\1\1\1\0\3\11\42\1\1\0\2\1\1\11\1\1"+
    "\2\11\1\0\1\1\3\11\1\1\10\11\2\1\11\11"+
    "\12\1\1\0\1\11\5\1\1\0\51\1\1\0\3\1"+
    "\1\0\1\1\3\11\1\0\1\11\1\0\11\11\52\1"+
    "\1\0\3\1\1\0\1\11\41\1\1\0\1\1\1\0"+
    "\31\1\2\0\21\1\1\11\1\1\2\0\13\1\1\11"+
    "\1\1\1\11\1\0\11\1\1\0\6\1\2\0\3\1"+
    "\1\11\1\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2902) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 136: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 137: break;
          case 3: 
            { return symbol(DIV);
            } 
            // fall through
          case 138: break;
          case 4: 
            { return symbol(MULT);
            } 
            // fall through
          case 139: break;
          case 5: 
            { return symbol(IDENTIFIER, yytext());
            } 
            // fall through
          case 140: break;
          case 6: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            } 
            // fall through
          case 141: break;
          case 7: 
            { return symbol(DOT);
            } 
            // fall through
          case 142: break;
          case 8: 
            { return symbol(PLUS);
            } 
            // fall through
          case 143: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            } 
            // fall through
          case 144: break;
          case 10: 
            { yybegin(CHARLITERAL);
            } 
            // fall through
          case 145: break;
          case 11: 
            { return symbol(AND);
            } 
            // fall through
          case 146: break;
          case 12: 
            { return symbol(COLON);
            } 
            // fall through
          case 147: break;
          case 13: 
            { return symbol(LPAREN);
            } 
            // fall through
          case 148: break;
          case 14: 
            { return symbol(RPAREN);
            } 
            // fall through
          case 149: break;
          case 15: 
            { return symbol(LBRACE);
            } 
            // fall through
          case 150: break;
          case 16: 
            { return symbol(RBRACE);
            } 
            // fall through
          case 151: break;
          case 17: 
            { return symbol(LBRACK);
            } 
            // fall through
          case 152: break;
          case 18: 
            { return symbol(RBRACK);
            } 
            // fall through
          case 153: break;
          case 19: 
            { return symbol(SEMICOLON);
            } 
            // fall through
          case 154: break;
          case 20: 
            { return symbol(COMMA);
            } 
            // fall through
          case 155: break;
          case 21: 
            { return symbol(MINUS);
            } 
            // fall through
          case 156: break;
          case 22: 
            { return symbol(GT);
            } 
            // fall through
          case 157: break;
          case 23: 
            { return symbol(EQ);
            } 
            // fall through
          case 158: break;
          case 24: 
            { return symbol(LT);
            } 
            // fall through
          case 159: break;
          case 25: 
            { return symbol(NOT);
            } 
            // fall through
          case 160: break;
          case 26: 
            { return symbol(COMP);
            } 
            // fall through
          case 161: break;
          case 27: 
            { return symbol(QUESTION);
            } 
            // fall through
          case 162: break;
          case 28: 
            { return symbol(OR);
            } 
            // fall through
          case 163: break;
          case 29: 
            { return symbol(XOR);
            } 
            // fall through
          case 164: break;
          case 30: 
            { return symbol(MOD);
            } 
            // fall through
          case 165: break;
          case 31: 
            { string.append( yytext() );
            } 
            // fall through
          case 166: break;
          case 32: 
            { throw new RuntimeException("Unterminated string at end of line");
            } 
            // fall through
          case 167: break;
          case 33: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            } 
            // fall through
          case 168: break;
          case 34: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            } 
            // fall through
          case 169: break;
          case 35: 
            { return symbol(DIVEQ);
            } 
            // fall through
          case 170: break;
          case 36: 
            { return symbol(MULTEQ);
            } 
            // fall through
          case 171: break;
          case 37: 
            { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
            } 
            // fall through
          case 172: break;
          case 38: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            } 
            // fall through
          case 173: break;
          case 39: 
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            } 
            // fall through
          case 174: break;
          case 40: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            } 
            // fall through
          case 175: break;
          case 41: 
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            } 
            // fall through
          case 176: break;
          case 42: 
            { return symbol(PLUSPLUS);
            } 
            // fall through
          case 177: break;
          case 43: 
            { return symbol(PLUSEQ);
            } 
            // fall through
          case 178: break;
          case 44: 
            { return symbol(IF);
            } 
            // fall through
          case 179: break;
          case 45: 
            { return symbol(DO);
            } 
            // fall through
          case 180: break;
          case 46: 
            { return symbol(MINUSMINUS);
            } 
            // fall through
          case 181: break;
          case 47: 
            { return symbol(MINUSEQ);
            } 
            // fall through
          case 182: break;
          case 48: 
            { return symbol(RSHIFT);
            } 
            // fall through
          case 183: break;
          case 49: 
            { return symbol(GTEQ);
            } 
            // fall through
          case 184: break;
          case 50: 
            { return symbol(EQEQ);
            } 
            // fall through
          case 185: break;
          case 51: 
            { return symbol(LTEQ);
            } 
            // fall through
          case 186: break;
          case 52: 
            { return symbol(LSHIFT);
            } 
            // fall through
          case 187: break;
          case 53: 
            { return symbol(NOTEQ);
            } 
            // fall through
          case 188: break;
          case 54: 
            { return symbol(ANDEQ);
            } 
            // fall through
          case 189: break;
          case 55: 
            { return symbol(ANDAND);
            } 
            // fall through
          case 190: break;
          case 56: 
            { return symbol(OREQ);
            } 
            // fall through
          case 191: break;
          case 57: 
            { return symbol(OROR);
            } 
            // fall through
          case 192: break;
          case 58: 
            { return symbol(XOREQ);
            } 
            // fall through
          case 193: break;
          case 59: 
            { return symbol(MODEQ);
            } 
            // fall through
          case 194: break;
          case 60: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            } 
            // fall through
          case 195: break;
          case 61: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            } 
            // fall through
          case 196: break;
          case 62: 
            { string.append( '\"' );
            } 
            // fall through
          case 197: break;
          case 63: 
            { string.append( '\'' );
            } 
            // fall through
          case 198: break;
          case 64: 
            { string.append( '\\' );
            } 
            // fall through
          case 199: break;
          case 65: 
            { string.append( '\r' );
            } 
            // fall through
          case 200: break;
          case 66: 
            { string.append( '\t' );
            } 
            // fall through
          case 201: break;
          case 67: 
            { string.append( '\b' );
            } 
            // fall through
          case 202: break;
          case 68: 
            { string.append( '\n' );
            } 
            // fall through
          case 203: break;
          case 69: 
            { string.append( '\f' );
            } 
            // fall through
          case 204: break;
          case 70: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            } 
            // fall through
          case 205: break;
          case 71: 
            { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            } 
            // fall through
          case 206: break;
          case 72: 
            { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
            } 
            // fall through
          case 207: break;
          case 73: 
            { return symbol(INT);
            } 
            // fall through
          case 208: break;
          case 74: 
            { return symbol(TRY);
            } 
            // fall through
          case 209: break;
          case 75: 
            { return symbol(NEW);
            } 
            // fall through
          case 210: break;
          case 76: 
            { return symbol(FOR);
            } 
            // fall through
          case 211: break;
          case 77: 
            { return symbol(URSHIFT);
            } 
            // fall through
          case 212: break;
          case 78: 
            { return symbol(RSHIFTEQ);
            } 
            // fall through
          case 213: break;
          case 79: 
            { return symbol(LSHIFTEQ);
            } 
            // fall through
          case 214: break;
          case 80: 
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
            } 
            // fall through
          case 215: break;
          case 81: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            } 
            // fall through
          case 216: break;
          case 82: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            } 
            // fall through
          case 217: break;
          case 83: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            } 
            // fall through
          case 218: break;
          case 84: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            } 
            // fall through
          case 219: break;
          case 85: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            } 
            // fall through
          case 220: break;
          case 86: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            } 
            // fall through
          case 221: break;
          case 87: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            } 
            // fall through
          case 222: break;
          case 88: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            } 
            // fall through
          case 223: break;
          case 89: 
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            } 
            // fall through
          case 224: break;
          case 90: 
            { return symbol(VOID);
            } 
            // fall through
          case 225: break;
          case 91: 
            { return symbol(BOOLEAN_LITERAL, true);
            } 
            // fall through
          case 226: break;
          case 92: 
            { return symbol(THIS);
            } 
            // fall through
          case 227: break;
          case 93: 
            { return symbol(LONG);
            } 
            // fall through
          case 228: break;
          case 94: 
            { return symbol(BOOLEAN);
            } 
            // fall through
          case 229: break;
          case 95: 
            { return symbol(BYTE);
            } 
            // fall through
          case 230: break;
          case 96: 
            { return symbol(ELSE);
            } 
            // fall through
          case 231: break;
          case 97: 
            { return symbol(CASE);
            } 
            // fall through
          case 232: break;
          case 98: 
            { return symbol(CHAR);
            } 
            // fall through
          case 233: break;
          case 99: 
            { return symbol(GOTO);
            } 
            // fall through
          case 234: break;
          case 100: 
            { return symbol(NULL_LITERAL);
            } 
            // fall through
          case 235: break;
          case 101: 
            { return symbol(URSHIFTEQ);
            } 
            // fall through
          case 236: break;
          case 102: 
            { return symbol(THROW);
            } 
            // fall through
          case 237: break;
          case 103: 
            { return symbol(BREAK);
            } 
            // fall through
          case 238: break;
          case 104: 
            { return symbol(CATCH);
            } 
            // fall through
          case 239: break;
          case 105: 
            { return symbol(CLASS);
            } 
            // fall through
          case 240: break;
          case 106: 
            { return symbol(CONST);
            } 
            // fall through
          case 241: break;
          case 107: 
            { return symbol(SUPER);
            } 
            // fall through
          case 242: break;
          case 108: 
            { return symbol(SHORT);
            } 
            // fall through
          case 243: break;
          case 109: 
            { return symbol(BOOLEAN_LITERAL, false);
            } 
            // fall through
          case 244: break;
          case 110: 
            { return symbol(FLOAT);
            } 
            // fall through
          case 245: break;
          case 111: 
            { return symbol(WHILE);
            } 
            // fall through
          case 246: break;
          case 112: 
            { return symbol(RETURN);
            } 
            // fall through
          case 247: break;
          case 113: 
            { return symbol(THROWS);
            } 
            // fall through
          case 248: break;
          case 114: 
            { return symbol(STATIC);
            } 
            // fall through
          case 249: break;
          case 115: 
            { return symbol(SWITCH);
            } 
            // fall through
          case 250: break;
          case 116: 
            { return symbol(NATIVE);
            } 
            // fall through
          case 251: break;
          case 117: 
            { return symbol(DOUBLE);
            } 
            // fall through
          case 252: break;
          case 118: 
            { return symbol(PUBLIC);
            } 
            // fall through
          case 253: break;
          case 119: 
            { return symbol(ABSTRACT);
            } 
            // fall through
          case 254: break;
          case 120: 
            { return symbol(EXTENDS);
            } 
            // fall through
          case 255: break;
          case 121: 
            { return symbol(DEFAULT);
            } 
            // fall through
          case 256: break;
          case 122: 
            { return symbol(FINALLY);
            } 
            // fall through
          case 257: break;
          case 123: 
            { return symbol(PRIVATE);
            } 
            // fall through
          case 258: break;
          case 124: 
            { return symbol(PACKAGE);
            } 
            // fall through
          case 259: break;
          case 125: 
            { return symbol(VOLATILE);
            } 
            // fall through
          case 260: break;
          case 126: 
            { return symbol(CONTINUE);
            } 
            // fall through
          case 261: break;
          case 127: 
            { return symbol(STRICTFP);
            } 
            // fall through
          case 262: break;
          case 128: 
            { return symbol(IMPORT);
            } 
            // fall through
          case 263: break;
          case 129: 
            { return symbol(INTERFACE);
            } 
            // fall through
          case 264: break;
          case 130: 
            { return symbol(TRANSIENT);
            } 
            // fall through
          case 265: break;
          case 131: 
            { return symbol(PROTECTED);
            } 
            // fall through
          case 266: break;
          case 132: 
            { return symbol(INSTANCEOF);
            } 
            // fall through
          case 267: break;
          case 133: 
            { return symbol(IMPLEMENTS);
            } 
            // fall through
          case 268: break;
          case 134: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            } 
            // fall through
          case 269: break;
          case 135: 
            { return symbol(SYNCHRONIZED);
            } 
            // fall through
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public Symbol debug_next_token() throws java.io.IOException {
    Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CppScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        CppScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new CppScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
